#!/usr/bin/env python
from libPyKAN import ckanRepo,pykancfg,util,filters
from libPyKAN.version import Version
from libPyKAN.installed import Installed
from libPyKAN.modmanager import ModManager,MultiProviderException,MissingDependencyException,ConfirmException
import argparse
from argparse import RawTextHelpFormatter
import sys
import json
if sys.version_info < (2, 7, 9):
    print "WARNING ! Many upstream download servers required SNI verification."
    print "Python does not support this in versions earlier than 2.7.9."
    print "You will be unable to install mods hosted on these servers"



def select_menu(msg, options):
    valid_answer = False
    while not valid_answer:
        print
        print msg
        for i in options:
            print '\t%s: %s' %(options.index(i),i)

        answer = raw_input('Choice:')
        valid_answer = answer.isdigit() and int(answer) >= 0 and int(answer) < len(options)
        if not valid_answer:
            valid_answer = answer in options
        if answer.isdigit():
            answer = int(answer)
        else:
            answer = answer in options and options.index(answer) or None
        if not valid_answer:
            print "\nError. Invalid choice. Please try again"
    return answer

def confirm(msg='Continue [y/n]'):
        answer = raw_input("Continue [y/n]")
        return answer.lower().startswith('y') 



if __name__ == '__main__':
    def show_settings():
        if options.allsettings:
            print settings.view_all()
        else:
            print settings

    def change_setting():
        if options.key == None or options.value == None:
            util.error("changesetting requires --key and --value options")
        key = options.key
        if not key in settings.flatsettings():
            foundkey = False
            for k in settings.flatsettings().keys():
                if k.lower() == key.lower():
                    foundkey = True
                    key = k
                    break
            if not foundkey:
                raise KeyError('Key %s does not exist' % key)
        util.debug('Updating %s=%s' % (key,options.value))
        value = options.value
        if value.isdigit():
            value = int(value)
        if isinstance(value,str) and value.lower() in ['true', 'false']:
            value = value.lower() == 'true' and True or False
        settings.set(key,value)
        print "Updated settings:", settings
        settings.save()

    def listkspdirs():
        c = 0
        for i in settings['KSPDIRS']:
            print '%s: %s' %(c, i)
            c += 1

    def addkspdir():
        if not options.kspdir:
            util.error('You must specify --kspdir with a string path when adding a new KSP directory')
        settings.addkspdir(kspdir)
        listkspdirs()

    def delkspdir():
        if not options.kspdir:
            util.error('You must specify --kspdir when removing a KSP directory')
        settings.delkspdir(kspdir)
        listkspdirs()

    def defaultksp():
        if not options.kspdir:
            util.error('You must specify --kspdir to change the default KSP directory ')
        settings.setdefaultksp(kspdir)
        listkspdirs()

    def list_repos():
        if not settings.KSPDIR:
            util.error('You must set up a KSP directory before you can manage repositories')
        c = 0
        repolist = repo.available_repo_list()
        for i in repolist:
            print '%s: [%s] %s (%s)' %(c,
                i['uri'] in settings['Repos'] and '*' or ' ',
                i['uri'],
                i['x_comment'])
            c += 1

    def add_repo():
        if not options.repo:
            util.error('You must give a repository index (from list_repos output) to add a repository')
        if options.repo < 0 or options.repo >= len(repo.available_repo_list()):
            util.error('Invalid repository index %s' % options.repo)
        settings.repos().append(repo.available_repo_list()[options.repo]['uri'])
        settings.KSPSettings['Repos'] = list(set(settings.repos()))
        settings.save()
        list_repos()

    def del_repo():
        if options.repo == 0:
            util.error('Error: you cannot deactivate the default repository.')
        if not options.repo:
            util.error('You must give a repository index (from list_repos output) to remove a repository')
        if options.repo < 0 or options.repo >= len(repo.available_repo_list()):
            util.error('Invalid repository index %s' % options.repo)
        uri = repo.available_repo_list()[options.repo]['uri']
        del(settings.repos()[settings.repos().index(uri)])
        settings.save()
        list_repos()

    def update():
        repo.update_repository_data()
        print 'Repository updated. %s modules in repo' %(len(repo.repodata.keys()))

    def list_modules():
        f = filters.Filter(settings)
        filtermethods = [f.compatible]
        filterargs = {}
        result = {}
        if options.upgradeable:
            upgradeable()
            return
        if options.installed:
            for i in INSTALLED.list_modules():
                print '%s:  %s | %s (%s)' %(i['identifier'],i['name'],i['version'],i['status'])
            return
        if options.allmods:
            filtermethods = []
        if options.search:
            filtermethods.append(f.regex)
            filterargs['needle'] = options.search
        if options.modversion:
            filtermethods.append(f.by_mod_version)
            filterargs['compareversion']= options.modversion
        if options.kspversion:
            filtermethods.append(f.for_ksp_version)
            filterargs['kspversion'] = options.kspversion
        for i in repo.list_modules(filtermethods, filterargs):
            if options.allversions:
                print "%s:  %s | version: %s (%s)" %(i['identifier'],i.get('name',i),i.get('version'),INSTALLED.modstatus(i.get('name',i)))
            else:
                name = i.get('name','')
                version = i.get('version','')
                modid = i['identifier']
                if modid not in result or Version(result[modid]['version']) < Version(version):
                    result[modid] = {'name': name, 'version': version}
        if result:
            for i in result:
                print "%s:  %s | %s (%s)" %(i,result[i]['name'],result[i]['version'],INSTALLED.modstatus(i))

    def show_module():
        if not options.module:
            util.error('Must specify --module with show')
        for mod in repo.find_latest(options.module).values():
            print json.dumps(mod, indent=8)

    def install_mod():
        done = False
        blacklist = []
        if not options.module:
            util.error('Must specify --module with install')
        downloadlist = []
        mods = repo.find_latest(options.module)
        if len(mods) > 1:
            answer = select_menu('Multiple mods match your search, please select one', mods.keys())
            mods = [mods[mods.keys()[answer]]]
        else:
            try:
                modid = list(mods.keys())[0]
            except IndexError:
                util.error('Could not find mod %s' % options.module)
            mods = [mods[modid]]        
        while not done:
            done = True
            try:
                MM = ModManager(mods, settings,repo)
                downloadlist += MM.get_download_list(options.reccomends,options.suggests, blacklist)
            except Exception as e:
                if isinstance(e,MultiProviderException):
                    modlist = str(e).split(',')
                    answer = select_menu('Multiple mods provide a required download, please select one', modlist)
                    choice = modlist[answer]
                    for m in list(repo.find_latest(choice).values()):
                        mods.append(m)
                    done = False
                elif isinstance(e,MissingDependencyException):
                    print
                    util.error(str(e))
                elif isinstance(e,ConfirmException):
                    print
                    done = False
                    owningmod,verb,modlist = str(e).split(':')
                    modlist = modlist.split(',')
                    print '%s %s:\n\t%s' %(owningmod,verb,'\n\t'.join(modlist))
                    answer = raw_input('Install these mods [y/n]')
                    if answer.lower().startswith('y'):
                        for m in modlist:
                            for mm in repo.find_latest(m).values():
                                mods.append(mm)
                    else:
                        blacklist += modlist
                else:
                    raise
        print "About to install:\n\t%s" %('\n\t'.join(downloadlist))
        if not confirm():
            sys.exit()
        print "Downloading module%s" %(len(downloadlist) > 1 and 's' or '')
        modfiles = MM.download()
        util.debug(modfiles)
        print "Installing modules"
        MM.install()

    def uninstall_mod():
        if not options.module:
            util.error('Must specify --module with uninstall')        
        mods = repo.find_latest(options.module)
        if len(mods) > 1:
            answer = select_menu('Multiple mods match your search, please select one', mods.keys())
            mods = [mods[mods.keys()[answer]]]
        else:
            try:
                modid = mods.keys()[0]
            except IndexError:
                util.error('Could not find mod %s' % options.module)
            mods = [mods[modid]] 
        if not modid in INSTALLED.all_modnames():
            util.error('Cannot uninstall %s as it is not installed' %modid)
        MM = ModManager(mods, settings,repo)
        remlist = MM.uninstall_list()
        print"About to remove: \n\t%s" %('\n\t'.join(remlist))
        if not confirm():
            sys.exit()
        for mod in remlist:
            print "Uninstalling %s" % mod
            MM.remove(mod)

    def upgradeable():
        if options.module:
            mods = [i for i in repo.find_latest(options.module) if i in INSTALLED.all_modnames()]
        else:
            mods = list(INSTALLED.all_modnames())
        upgradeables = []
        for mod in mods:
            m = repo.find_latest(mod)[mod]
            print m.get('version')
            if Version(m.get('version','0.0.0')) > Version(INSTALLED[mod].get('version','0.0.0')):
                upgradeables.append(mod)
        print "Mods that can be upgraded: \n"  
        for u in upgradeables:
            print '\t%s %s -> %s' %(u,INSTALLED[mod].get('version','0.0.0'),repo.find_latest(u).get('version','0.0.0'))
        return upgradeables

    def upgrade():
        uplist = [INSTALLED[i] for i in upgradeable()]
        if not confirm():
            sys.exit()
        MM = ModManager(uplist, settings,repo)
        MM.upgrade()

        print "Modules upgraded"


    actions = {
        'show_settings': {'method': show_settings,'help':'Show editable settings and their values'},
        'change_setting': {'method': change_setting,'help':'Change a setting. You must give --key and --value.'},
        'listkspdirs': {'method': listkspdirs,'help': 'List the KSP installation directories we manage'},
        'addkspdir': {'method': addkspdir, 'help': 'Adds a new KSP directory to the configuration. --kspdir'},
        'delkspdir': {'method': delkspdir,'help':'Deletes a KSP directory from the configuration. You must specify --kspdir'},
        'default_ksp': {'method': defaultksp,'help': 'Changes the default KSP directory used if no --kspdir is specified'},
        'list_repos': {'method': list_repos,'help': 'List the possible upstream repos and indicates which ones are in use'},
        'add_repo': {'method': add_repo,'help':'Activate another repository for upstream sources. You must specify --repo'},
        'del_repo': {'method': del_repo,'help':'Deactivate a repository. You must specify --repo. Note you cannot remove the default repository'},
        'update': {'method':update, 'help': 'Update the mod data from the repositories'},
        'list_modules': {'method': list_modules,'help': 'List available modules. Optionally filter the list. Default filter is "compatible"'},
        'show': {'method': show_module, 'help':'Show full details on a particular module. Needs --module option.'},        
        'install': {'method': install_mod, 'help': 'Install a module. Needs --module option.'},
        'upgrade': {'method': upgrade, 'help': 'Upgrade modules. If --module is not given, upgrade all installed modules to latest version.'},
        'uninstall': {'method': uninstall_mod, 'help': 'Remove a module. Needs --module option.'}
    }

    parser = argparse.ArgumentParser(description = 'Python client for CKAN data',formatter_class=RawTextHelpFormatter)
    parser.add_argument('--kspdir',type=str,default=None,action='store',help='The KSP directory to work with. Can be a full path or an index from the list.')
    parser.add_argument('--debug',action='store_true',help='Print (a great deal off) verbose debug messages to stderr')
    parser.add_argument('action',default='show_settings',choices=actions.keys())
    parser.add_argument('--key',type=str,default=None,help='The key to change the value off. Only used with change_setting')
    parser.add_argument('--value',type=str,default=None,help='The new value to set for key. Only used with change_setting')
    parser.add_argument('--repo',type=int,default=None,help='The repo index or uri. Used with add_repo and del_repo.')
    parser.add_argument('--allsettings',action='store_true',help='Option to showsettings to show all settings, not just the ones that can be directly edited with change_setting')
    parser.add_argument('--allmods',action='store_true',help="Show the module list without any filters. Use with list_modules.")
    parser.add_argument('--search',type=str,default=None,help="Search for module by regular expression. Use with list_modules.")
    parser.add_argument('--allversions',action='store_true',help="Show the all versions of mods. Default is to only show the highest version. Use with list_modules.")
    parser.add_argument('--installed',action='store_true',help="Show only installed modules. Use with list_modules.")
    parser.add_argument('--upgradeable',action='store_true',help="Show installed mods with upgrades available. Use with list_modules.")
    parser.add_argument('--modversion',type=str,default=None,help='Search for specific mod versions. Use with list_modules.')
    parser.add_argument('--kspversion',type=str,default=None,help='Search for mods for a different KSP version. Use with list_modules.')
    parser.add_argument('--module',type=str,default=None,help='Name of the module. Use with show,install, uninstall and upgrade.')
    parser.add_argument('--version',type=str,default=None,help='Version of the module. Use with install. Optional: default to latest compatible version.')
    parser.add_argument('--reccomends',type=str,default='ask',choices=['ask','yes','no'],help='What to do with reccomended mods. Default: ask.')    
    parser.add_argument('--suggests',type=str,default='no',choices=['ask','yes','no'],help='What to do with sugested mods. Default: no (do not install).')        

    parser.epilog = 'Actions:\n' 
    for i in sorted(actions.keys()):
        parser.epilog = '%s\n*%s:  %s\n' %(parser.epilog,i,actions[i]['help'])

    parser.epilog = '%s\nMost list selections can use the numeric index or the text\n%s' %(parser.epilog,
        'Examples:\n%s add_repo --repo 1\n%s add_repo https://github.com/KSP-CKAN/CKAN-meta-dev/archive/RemoteTech-pre.tar.gz ' %(sys.argv[0],sys.argv[0]))

    options = parser.parse_args(sys.argv[1:])
    util.DEBUG=options.debug
    if isinstance(options.kspdir, str) and not options.kspdir.isdigit():
        kspdir = options.kspdir
    else:
        kspdir = None

    util.debug('KSP Directory: %s'% kspdir)

    settings = pykancfg.PyKANSettings(kspdir)

    if isinstance(options.kspdir,str) and (kspdir == None) and options.kspdir.isdigit():
        kspdir = settings['KSPDIRS'][int(options.kspdir)]
        settings = pykancfg.PyKANSettings(kspdir)
        util.debug('Settings.KSPDIR: %s' %settings.KSPDIR)

    if isinstance(kspdir,str) and not util.is_kspdir(kspdir):
        util.error('%s Does not appear to be a valid KSP installation' % kspdir)

    if settings.KSPDIR:
        repo = ckanRepo.CkanRepo(settings)

        INSTALLED = Installed(settings,repo)

        settings.reload()
        print "Using KSP Directory: ",settings.KSPDIR

    actions[options.action]['method']()
